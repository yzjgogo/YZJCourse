<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/sv"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <LinearLayout
        android:id="@+id/activity_main"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        tools:context="com.yin.yzjcourse.MainActivity">
        <Button
            android:id="@+id/bt_pre_post"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textAllCaps="false"
            android:gravity="left"
            android:text="矩阵的左乘(post)和右乘(pre)" />
        <Button
            android:id="@+id/bt_new_1"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textAllCaps="false"
            android:gravity="left"
            android:text="无参构造 new Matrix() \n创建出一个单位矩阵" />
        <Button
            android:id="@+id/bt_new_2"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textAllCaps="false"
            android:gravity="left"
            android:text="有参构造 new Matrix(Matrix src) \n创建一个Matrix，并对src深拷贝(理解为新的matrix和src是两个对象，但内部数值相同即可)。" />
        <Button
            android:id="@+id/bt_set_values"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textAllCaps="false"
            android:gravity="left"
            android:text="void setValues (float[] values) \n参数是浮点型的一维数组，长度需要大于9，拷贝数组中的前9位数值赋值给当前Matrix" />
        <Button
            android:id="@+id/bt_get_values"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textAllCaps="false"
            android:gravity="left"
            android:text="void getValues (float[] values) \ngetValues和setValues是一对方法，参数也是浮点型的一维数组，长度需要大于9，将Matrix中的数值拷贝进参数的前9位中。" />
        <Button
            android:id="@+id/bt_set"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textAllCaps="false"
            android:gravity="left"
            android:text="void set (Matrix src) \n没有返回值，有一个参数，作用是将参数Matrix的数值复制到当前Matrix中。如果参数为空，则重置当前Matrix，相当于reset()。" />
        <Button
            android:id="@+id/bt_reset"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textAllCaps="false"
            android:gravity="left"
            android:text="void reset () \n重置当前Matrix(将当前Matrix重置为单位矩阵)。" />
        <Button
            android:id="@+id/bt_equals"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textAllCaps="false"
            android:gravity="left"
            android:text="equals() \n比较两个Matrix的数值是否相同。" />
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:background="@color/main_tabbar_font_color_focus">
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="mapPoints方法 \n计算一组点基于当前Matrix变换后的位置，(由于是计算点，所以参数中的float数组长度一般都是偶数的,若为奇数，则最后一个数值不参与计算)。"/>
            <Button
                android:id="@+id/bt_map_1"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textAllCaps="false"
                android:gravity="left"
                android:text="void mapPoints (float[] pts) \n方法仅有一个参数，pts数组作为参数传递原始数值，计算结果仍存放在pts中。" />
            <Button
                android:id="@+id/bt_map_2"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textAllCaps="false"
                android:gravity="left"
                android:text="void mapPoints (float[] dst, float[] src) \n src作为参数传递原始数值，计算结果存放在dst中，src不变。" />
            <Button
                android:id="@+id/bt_map_3"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textAllCaps="false"
                android:gravity="left"
                android:text="void mapPoints (float[] dst, int dstIndex,float[] src, int srcIndex, int pointCount) \n 可以指定只计算一部分数值" />
        </LinearLayout>
        <Button
            android:id="@+id/bt_map_radius"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:gravity="left"
            android:textAllCaps="false"
            android:text="float mapRadius (float radius) \n测量半径，由于圆可能会因为画布变换变成椭圆，所以此处测量的是平均半径。" />
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:background="@color/colorAccent">
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="mapRect方法 \n测量矩形变换后位置。"/>

            <Button
                android:id="@+id/bt_map_rect_1"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:gravity="left"
                android:textAllCaps="false"
                android:text="boolean mapRect (RectF rect) \n测量rect并将测量结果放入rect中，返回值是判断矩形经过变换后是否仍为矩形。" />

            <Button
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:gravity="left"
                android:textAllCaps="false"
                android:text="boolean mapRect (RectF dst, RectF src) \n测量src并将测量结果放入dst中，返回值是判断矩形经过变换后是否仍为矩形,和之前没有什么太大区别，此处就不啰嗦了。" />
        </LinearLayout>

        <Button
            android:id="@+id/bt_map_vectors"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:gravity="left"
            android:textAllCaps="false"
            android:text="测量向量系列方法 \n
void mapVectors (float[] vecs) \n
void mapVectors (float[] dst, float[] src) \n
void mapVectors (float[] dst, int dstIndex, float[] src, int srcIndex, int vectorCount) \n
mapVectors 与 mapPoints 基本上是相同的，可以直接参照上面的mapPoints使用方法。\n
而两者唯一的区别就是mapVectors不会受到位移的影响，这符合向量的定律，如果你不了解的话，请找到以前教过你的老师然后把学费要回来。" />
    </LinearLayout>
</ScrollView>
